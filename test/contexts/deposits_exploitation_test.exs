defmodule DepositsExploitationTest do
  use Seelies.Test.DataCase
  import Commanded.Assertions.EventAssertions


  test "Unit can't exploit a deposit from a distant area" do
    :ok = Seelies.Router.dispatch(%Seelies.StartGame{game_id: "42", board: Seelies.Test.board(), teams: Seelies.Test.one_team()})
    :ok = Seelies.Router.dispatch(%Seelies.DeployStartingUnit{game_id: "42", unit_id: "u1", territory_id: "t1", species: "ant"})
    {:error, :deposit_is_too_far} = Seelies.Router.dispatch(%Seelies.UnitStartsExploitingDeposit{game_id: "42", unit_id: "u1", deposit_id: "d5", time: 60, player_id: "p1"})
  end


  test "Unit can't exploit a nonexistent deposit" do
    :ok = Seelies.Router.dispatch(%Seelies.StartGame{game_id: "42", board: Seelies.Test.board(), teams: Seelies.Test.one_team()})
    :ok = Seelies.Router.dispatch(%Seelies.DeployStartingUnit{game_id: "42", unit_id: "u1", territory_id: "t1", species: "ant"})
    {:error, :deposit_not_found} = Seelies.Router.dispatch(%Seelies.UnitStartsExploitingDeposit{game_id: "42", unit_id: "u1", deposit_id: "d1000", time: 60, player_id: "p1"})
  end


  test "Nonexistent unit can't exploit a deposit" do
    :ok = Seelies.Router.dispatch(%Seelies.StartGame{game_id: "42", board: Seelies.Test.board(), teams: Seelies.Test.one_team()})
    :ok = Seelies.Router.dispatch(%Seelies.DeployStartingUnit{game_id: "42", unit_id: "u1", territory_id: "t1", species: "ant"})
    {:error, :unit_not_found} = Seelies.Router.dispatch(%Seelies.UnitStartsExploitingDeposit{game_id: "42", unit_id: "u1000", deposit_id: "d1", time: 60, player_id: "p1"})
  end


  test "Unit can't exploit from another team's territory" do
    :ok = Seelies.Router.dispatch(%Seelies.StartGame{game_id: "42", board: Seelies.Test.board(), teams: Seelies.Test.one_team()})
    :ok = Seelies.Router.dispatch(%Seelies.DeployStartingUnit{game_id: "42", unit_id: "u1", territory_id: "t1", species: "ant"})
    {:error, :unauthorized_player} = Seelies.Router.dispatch(%Seelies.UnitStartsExploitingDeposit{game_id: "42", unit_id: "u1", deposit_id: "d1", time: 60, player_id: "p2"})
  end


  test "Unit starts exploiting the deposit" do
    :ok = Seelies.Router.dispatch(%Seelies.StartGame{game_id: "42", board: Seelies.Test.board(), teams: Seelies.Test.one_team()})
    :ok = Seelies.Router.dispatch(%Seelies.DeployStartingUnit{game_id: "42", unit_id: "u1", territory_id: "t1", species: "ant"})
    :ok = Seelies.Router.dispatch(%Seelies.UnitStartsExploitingDeposit{game_id: "42", unit_id: "u1", deposit_id: "d1", time: 60, player_id: "p1"})

    assert_receive_event(Seelies.UnitStartedExploitingDeposit, fn (event) ->
      assert event.game_id == "42"
      assert event.unit_id == "u1"
      assert event.deposit_id == "d1"
      assert event.time == 60
    end)
  end


  test "Unit can't be sent again if already exploiting" do
    :ok = Seelies.Router.dispatch(%Seelies.StartGame{game_id: "42", board: Seelies.Test.board(), teams: Seelies.Test.one_team()})
    :ok = Seelies.Router.dispatch(%Seelies.DeployStartingUnit{game_id: "42", unit_id: "u1", territory_id: "t1", species: "ant"})
    :ok = Seelies.Router.dispatch(%Seelies.UnitStartsExploitingDeposit{game_id: "42", unit_id: "u1", deposit_id: "d1", time: 60, player_id: "p1"})
    {:error, :already_exploiting_deposit} = Seelies.Router.dispatch(%Seelies.UnitStartsExploitingDeposit{game_id: "42", unit_id: "u1", deposit_id: "d1", time: 60, player_id: "p1"})
    Commanded.Aggregates.Aggregate.aggregate_state(Seelies.Game, "42")
  end


  test "Unit exploitation can't be stopped by another team's player" do
    :ok = Seelies.Router.dispatch(%Seelies.StartGame{game_id: "42", board: Seelies.Test.board(), teams: Seelies.Test.one_team()})
    :ok = Seelies.Router.dispatch(%Seelies.DeployStartingUnit{game_id: "42", unit_id: "u1", territory_id: "t1", species: "ant"})
    :ok = Seelies.Router.dispatch(%Seelies.UnitStartsExploitingDeposit{game_id: "42", unit_id: "u1", deposit_id: "d1", time: 60, player_id: "p1"})
    {:error, :unauthorized_player} = Seelies.Router.dispatch(%Seelies.UnitStopsExploitingDeposit{game_id: "42", unit_id: "u1", time: 120, player_id: "p2"})
  end


  test "Exploitation of a nonexistant unit can't be stopped" do
    :ok = Seelies.Router.dispatch(%Seelies.StartGame{game_id: "42", board: Seelies.Test.board(), teams: Seelies.Test.one_team()})
    :ok = Seelies.Router.dispatch(%Seelies.DeployStartingUnit{game_id: "42", unit_id: "u1", territory_id: "t1", species: "ant"})
    :ok = Seelies.Router.dispatch(%Seelies.UnitStartsExploitingDeposit{game_id: "42", unit_id: "u1", deposit_id: "d1", time: 60, player_id: "p1"})
    {:error, :unit_not_found} = Seelies.Router.dispatch(%Seelies.UnitStopsExploitingDeposit{game_id: "42", unit_id: "u1000", time: 60, player_id: "p1"})
  end


  test "Exploitation of an idle unit can't be stopped" do
    :ok = Seelies.Router.dispatch(%Seelies.StartGame{game_id: "42", board: Seelies.Test.board(), teams: Seelies.Test.one_team()})
    :ok = Seelies.Router.dispatch(%Seelies.DeployStartingUnit{game_id: "42", unit_id: "u1", territory_id: "t1", species: "ant"})
    {:error, :not_exploiting} = Seelies.Router.dispatch(%Seelies.UnitStopsExploitingDeposit{game_id: "42", unit_id: "u1", time: 60, player_id: "p1"})
  end


  test "Stopping exploitation bring some resources back to the territory" do
    :ok = Seelies.Router.dispatch(%Seelies.StartGame{game_id: "42", board: Seelies.Test.board(), teams: Seelies.Test.one_team()})
    :ok = Seelies.Router.dispatch(%Seelies.DeployStartingUnit{game_id: "42", unit_id: "u1", territory_id: "t1", species: "ant"})
    :ok = Seelies.Router.dispatch(%Seelies.UnitStartsExploitingDeposit{game_id: "42", unit_id: "u1", deposit_id: "d1", time: 60, player_id: "p1"})
    :ok = Seelies.Router.dispatch(%Seelies.UnitStopsExploitingDeposit{game_id: "42", unit_id: "u1", time: 120, player_id: "p1", })
    :ok = Seelies.Router.dispatch(%Seelies.UnitStartsExploitingDeposit{game_id: "42", unit_id: "u1", deposit_id: "d1", time: 60, player_id: "p1"})

    assert_receive_event(Seelies.UnitStoppedExploitingDeposit, fn (event) ->
      assert event.game_id == "42"
      assert event.unit_id == "u1"
      assert event.time == 120
    end)

    game = Commanded.Aggregates.Aggregate.aggregate_state(Seelies.Game, "42")
    assert Seelies.ResourcesQuantity.territory(game, "t1")["gold"] > 0
  end


  test "Exploitation ticks make units bring some resources back to their territory" do
    :ok = Seelies.Router.dispatch(%Seelies.StartGame{game_id: "42", board: Seelies.Test.board(), teams: Seelies.Test.one_team()})
    :ok = Seelies.Router.dispatch(%Seelies.DeployStartingUnit{game_id: "42", unit_id: "u1", territory_id: "t1", species: "ant"})
    :ok = Seelies.Router.dispatch(%Seelies.DeployStartingUnit{game_id: "42", unit_id: "u2", territory_id: "t5", species: "ant"})
    :ok = Seelies.Router.dispatch(%Seelies.UnitStartsExploitingDeposit{game_id: "42", unit_id: "u1", deposit_id: "d1", time: 0, player_id: "p1"})
    :ok = Seelies.Router.dispatch(%Seelies.UnitStartsExploitingDeposit{game_id: "42", unit_id: "u2", deposit_id: "d5", time: 0, player_id: "p1"})
    :ok = Seelies.Router.dispatch(%Seelies.DepositsExploitationTicks{game_id: "42", time: 60})
    {:error, :already_exploiting_deposit} = Seelies.Router.dispatch(%Seelies.UnitStartsExploitingDeposit{game_id: "42", unit_id: "u1", deposit_id: "d1", time: 60, player_id: "p1"})

    game = Commanded.Aggregates.Aggregate.aggregate_state(Seelies.Game, "42")
    assert Seelies.ResourcesQuantity.territory(game, "t1")["gold"] > 0
    assert Seelies.ResourcesQuantity.territory(game, "t1")["silver"] == 0
    assert Seelies.ResourcesQuantity.territory(game, "t5")["gold"] == 0
    assert Seelies.ResourcesQuantity.territory(game, "t5")["silver"] > 0

    :ok = Seelies.Router.dispatch(%Seelies.DepositsExploitationTicks{game_id: "42", time: 120})
    game_2 = Commanded.Aggregates.Aggregate.aggregate_state(Seelies.Game, "42")
    assert Seelies.ResourcesQuantity.territory(game_2, "t1")["gold"] == Seelies.ResourcesQuantity.territory(game, "t1")["gold"] * 2
    assert Seelies.ResourcesQuantity.territory(game_2, "t1")["silver"] == 0
    assert Seelies.ResourcesQuantity.territory(game_2, "t5")["gold"] == 0
    assert Seelies.ResourcesQuantity.territory(game_2, "t5")["silver"] == Seelies.ResourcesQuantity.territory(game, "t5")["silver"] * 2
  end
end
